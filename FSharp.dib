#!markdown

# 1. Data types and records
# 2. Function and function signature
# 3. Data and function are things
# 4. Optional
# 5. Collections
# 6. Program thinking: map, filter and fold  

#!fsharp

let a=1000
let x=99.87
let s="test"

#!fsharp

let t=(1000,99.87,"test")
t

#!fsharp

type TestT=
    {
        Num:int
        F:float
        S:string
    }
let myT=
    {
        Num=1000
        F=99.87
        S="test"
    }
myT

#!fsharp

// f1: int -> int 
let f1 x =
    x + 10
// f2: int -> int -> int
let f2 x y =
    x + y
// f3: int -> float -> int
let f3 (x, y) =
    x + y
let f4=f2 10 
let f5=f4
f4 20

#!fsharp

let f x y = // int->int->int
    if y=0
    then 
        None
    else 
        Some(x / y)
let f11 x = // int->int option // int->option<int>
    if x=0
    then 
        None
    else 
        Some(x+1)
let r=f 10 4
printf "%A" r
let f6 x = x - 1
let f10=Option.map f6
let f25=Option.bind f11
let r2=
    r
    |> f10
    |> f25
    |> Option.map (fun x -> x - 2 ) 
    |> Option.map (fun x -> x - 3 ) 
    |> Option.map (fun x -> x - 4 ) 
    |> Option.map (fun x -> x - 5 ) 
//let r10=r|> f6|> f7 |> f8|>f9
//let r10=f9(f8(f7(f6(r))))
printf "%A" r2

#!fsharp

let a=[|1..100|]
let a2=a

#!fsharp

open System.Collections.Generic
let data=ResizeArray()
let a2=[|1.0..100.0|] 
for i=0 to a2.Length-1 do
    data.Add(a2.[i])
    data.Add(a2.[i])
data

#!fsharp

let a2=[|1.0..100.0|]
let mutable sumup=0.0
for i in a2 do
    sumup <- i + sumup
sumup

#!fsharp

let sumup2=
    [|1.0..100.0|]
    |>Array.fold (fun s t -> s + t) 0.0 
sumup2

#!fsharp

[|1.0..100.0|]
|>Array.filter (fun i -> i%2.0=0.0)

#!fsharp

let data2=data|>Seq.min
data2

#!fsharp

[|1.0..100.0|]
|>Array.map (fun i -> i + 1.0)

#!markdown

# 7. 'Match with' presents parttern matching 
# 8. Classes and Interfaces
# 9. Useful Data Collection
# 10. Computation expression 
# 11. Parallel Calculation
# 12. Packages and Nuget
# 13. DU

#!fsharp

let ``this is a test result``=
    if 10=0 
    then true
    elif 10>5
    then true 
    else false
``this is a test result``

#!fsharp

let g x y = // int -> int -> option<int>
    match y with
    |0 -> 
        //lfjdljaf;lsjdl;fakjf
        None
    |1|2|3-> Some 0
    |_ -> Some(x/y)
g 10 2

#!fsharp

let (|IsTest|_|) x = //int ->option<string>
    if x<>0.0
    then None 
    else Some ("test is ok",0)
let div y x = //int->int->unit 
    match x with
    | IsTest (msg,i) -> printf $"{msg},{i}"
    | _ -> printf $"{y/x}"
div 100.0 0.0

#!fsharp

let (|Even|Odd|) input = if input % 2 = 0 then Even else Odd
[|1..100|]
|>Array.map (fun i ->
    match i with 
    | Even -> i,"Even"
    | Odd -> i,"Odd"
)

#!fsharp

let (|Integer|_|) (str: string) =
   let mutable intvalue = 0
   if System.Int32.TryParse(str, &intvalue) then Some(intvalue)
   else None

let (|Float|_|) (str: string) =
   let mutable floatvalue = 0.0
   if System.Double.TryParse(str, &floatvalue) then Some(floatvalue)
   else None

let parseNumeric str =
   match str with
     | Integer i -> printfn "%d : Integer" i
     | Float f -> printfn "%f : Floating point" f
     | _ -> printfn "%s : Not matched." str

parseNumeric "1.1"
parseNumeric "0"
parseNumeric "0.0"
parseNumeric "10"
parseNumeric "Something else"

#!fsharp

type MyClass(name:string,age:int)=
    let mutable name_=name
    let age_=age
    member x.Name=name_ + string(age_)
    member x.Attack(target)=
        printf "%A is attacking a %A" name_ target
    member x.Change(new_name)=
        name_ <- new_name 
let c=MyClass("aijun",40)
c.Name
c.Attack "pig"

#!fsharp

type IMyinterface =
    abstract Test1:int->int
    abstract T2:int

#!fsharp

let g2 x = x + 10
let make_inter ()=
    
    {
        new IMyinterface with
            member x.Test1 y = g2 y
            member x.T2=0
    }

#!fsharp

type MyClass2()=
    interface IMyinterface with
        member x.Test1 y = g2 y
        member x.T2=0

#!fsharp

open System.Collections.Generic
let myDict=
    [|1..100|]
    |>Array.map (fun i -> 
        string(i),0
        )
    |>dict
    |>fun i -> Dictionary<string,int>(i)
myDict.Add("0",100)
myDict.Clear()

#!fsharp

open System.Collections.Generic
let data=[|1;2;3;3;3;3;3;3;2|]
let mySet=HashSet<int>(data)
printf "%A" mySet

#!fsharp

[|1;2;3;3;3;3;3;3;2|]|>set

#!fsharp

let do_a_job y=
    async {
        
        return y
    }
let result1=do_a_job 10 |>Async.RunSynchronously
let jobs=
    [|1..100|]
    |>Array.map do_a_job 
    |>Async.Parallel
    |>Async.RunSynchronously
let second_job y =
    async {
        let! r1=do_a_job y
        return r1
    }
// Async.bind 
// Async.map

#!fsharp

[|1..100|]
|>Array.Parallel.map (fun i -> i*i)

#!fsharp

#r "nuget: XPlot.Plotly"

open XPlot.Plotly

[ 1 .. 10 ] |> Chart.Line |> Chart.Show

#!fsharp

#r "nuget: Newtonsoft.Json"
open Newtonsoft.Json

let data = {| Name = "Don Syme"; Occupation = "F# Creator" |}
JsonConvert.SerializeObject(data)

#!fsharp

#r "nuget: MathNet.Numerics.FSharp"
open MathNet.Numerics.LinearAlgebra
let m = matrix [[ 1.0; 2.0 ]
                [ 3.0; 4.0 ]]
let m' = m.Inverse()

let v= vector [1.0;2.0]
let r= m * v
r

#!fsharp

type Gender=
    |Male
    |Female
let myGender=Male
myGender

#!fsharp

type DataCell=
    | IntData of int
    | StringData of string
    | FloatData of float 
    | NoData
let mydata2= FloatData 10.0
mydata2
[|1..100|]
|>Array.Parallel.map (fun i ->
    match i%2 with
    | 0 -> IntData i
    | _ -> NoData
)
|>Array.Parallel.choose (fun i ->
    match i with
    | IntData a -> Some a
    | _ -> None
)
|>Array.sum

#!fsharp

#r "nuget: Hopac"
open Hopac
let t=
    job{
        return 0
    }
//Job.seqCollect
//Job.conCollect
